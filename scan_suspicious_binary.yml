---
- name: Localized Yara Scan (Using Rules Already on Target)
  # This playbook performs localized static analysis (Yara scan) on a specific file
  # on an endpoint. It's triggered by a centralized system (AWX via Orin)
  # and uses Yara rules expected to already exist on the target machine.
  hosts: "{{ target_host_ip | default('localhost') }}" # Dynamically set by AWX extra_vars
  become: yes # Required for package installation and potentially accessing files
  gather_facts: yes # Keep enabled for ansible_date_time (though not used now) or other facts

  vars:
    # --- Variables expected via AWX extra_vars ---
    # file_to_scan: # Mandatory, e.g., "/usr/bin/wget" provided by trigger script
    # target_host_ip: # Mandatory, e.g., "192.168.190.33" provided by trigger script

    # --- Configuration: Paths on the TARGET Machine (Linux Desktop) ---
    # Define the location where Yara rules *already exist* on the target.
    yara_rules_dir_on_target: "/home/peter/Desktop/scripts" # <<< PATH ON LINUX DESKTOP

    # --- Internal Playbook Vars ---
    yara_executable_on_target: "yara" # Adjust if needed

  pre_tasks:
    - name: Validate mandatory input variables
      ansible.builtin.assert:
        that:
          - file_to_scan is defined
          - file_to_scan | length > 0
          - target_host_ip is defined
        fail_msg: "Mandatory variable 'file_to_scan' must be provided via AWX extra_vars."
        quiet: yes

  tasks:
    - name: "Setup Phase: Ensure Yara package is present on target '{{ inventory_hostname }}'"
      ansible.builtin.package:
        name: "{{ yara_executable_on_target }}"
        state: present
      register: pkg_result
      failed_when: pkg_result is failed and "No package matching" not in pkg_result.msg | default('') and "Nothing to do" not in pkg_result.msg | default('')

    - name: "Setup Phase: Verify Yara executable exists on target"
      ansible.builtin.command: "which {{ yara_executable_on_target }}"
      register: yara_which_check
      changed_when: false
      failed_when: false # Let scan task handle if missing
      check_mode: no

    # --- REMOVED: Task to create temporary directory ---
    # --- REMOVED: Task to copy rules from AWX node ---

    - name: "Setup Phase: Verify Yara rules directory exists on target"
      ansible.builtin.stat:
        path: "{{ yara_rules_dir_on_target }}"
      register: rules_dir_stat
      when: yara_which_check.rc == 0 # Only check if yara seems available

    - name: "Analysis Phase: Check if target file '{{ file_to_scan }}' exists"
      ansible.builtin.stat:
        path: "{{ file_to_scan }}"
      register: file_stat
      when: yara_which_check.rc == 0 # Only check if yara seems available

    - name: "Analysis Phase: Execute Yara scan (Using rules on target)"
      # Runs Yara against the specified file using rules already present on the target.
      ansible.builtin.command:
        # -w: disable warnings
        # Point directly to the existing rules directory on the target
        cmd: "{{ yara_executable_on_target }} -w {{ yara_rules_dir_on_target }} {{ file_to_scan }}"
      register: yara_result
      failed_when: yara_result.rc > 1 # Yara exits 0=no matches, 1=matches, >1=error
      changed_when: false
      when:
        - yara_which_check.rc == 0                                          # Yara exists
        - rules_dir_stat.stat is defined and rules_dir_stat.stat.exists and rules_dir_stat.stat.isdir # Rules dir exists
        - file_stat.stat is defined and file_stat.stat.exists and file_stat.stat.isreg   # Target file exists

    - name: "Reporting Phase: Display Yara Scan Results (if matches or errors)"
      ansible.builtin.debug:
        msg:
          - "YARA Scan Result on {{ inventory_hostname }} for file: {{ file_to_scan }}"
          - "Triggered by: Centralized Behaviour Monitoring (via AWX)"
          - "Using Rules From Target Path: {{ yara_rules_dir_on_target }}"
          - "Scan Command: {{ yara_result.cmd | default('N/A') }}"
          - "Return Code: {{ yara_result.rc }}"
          - "Matches/Output (stdout):"
          - "{{ yara_result.stdout | default('(No Matches Found)') }}"
          - "Errors (stderr): {{ yara_result.stderr | default('(No Errors)') }}"
      when: yara_result is defined and (yara_result.rc != 0 or yara_result.stderr | length > 0)

    - name: "Reporting Phase: Note if target file was not found/scannable"
      ansible.builtin.debug:
        msg: "YARA Scan Skipped on {{ inventory_hostname }}: Target file '{{ file_to_scan }}' not found, not a regular file, or prerequisite step failed."
      when: yara_which_check.rc == 0 and (yara_result is not defined or yara_result is skipped or (not file_stat.stat.exists or not file_stat.stat.isreg))

    - name: "Reporting Phase: Note if Yara rules directory was not found on target"
      ansible.builtin.debug:
        msg: "YARA Scan Skipped on {{ inventory_hostname }}: Pre-existing rules directory '{{ yara_rules_dir_on_target }}' not found or not a directory."
      when: yara_which_check.rc == 0 and (rules_dir_stat.stat is not defined or not rules_dir_stat.stat.exists or not rules_dir_stat.stat.isdir)

    - name: "Reporting Phase: Note if Yara executable was not found"
      ansible.builtin.debug:
        msg: "YARA Scan Failed on {{ inventory_hostname }}: '{{ yara_executable_on_target }}' command not found on target system."
      when: yara_which_check.rc != 0

  # --- REMOVED: Post task to clean up temporary directory ---
  post_tasks: [] # Explicitly empty
